# www2.example.com HTTP Redirect to HTTPS
server {
    listen 80;
    server_name www2.example.com;
    return 301 https://$host$request_uri;
}
# www2.example.com HTTPS
server {
    listen 443 ssl default_server;
    server_name www2.example.com;
    status_zone www2.example.com_https;

    # Dedicated logs
    # access_log /var/log/nginx/www2.example.com.log main_ext; # access logs
    # error_log  /var/log/nginx/www2.example.com_errors.log info; # error logs

    ssl_certificate /etc/ssl/example.com.crt;
    ssl_certificate_key /etc/ssl/example.com.key;
    # See best practices for security and compatibility here:
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # Include SSL configurations (uncomment one line below)
    # include includes/ssl/ssl_old.conf; # Compatiblity for very old clients. Should be used only as a last resort
    # include includes/ssl/ssl_intermediate.conf; # General-purpose, recommended for almost all systems
    # include includes/ssl/ssl_modern.conf; # Modern clients: TLS 1.3 with no need backward compatibility
    # include includes/ssl/ssl_a+_strong.conf; # Based on SSL Labs A+ (https://www.ssllabs.com/ssltest/)

    location / {
        include includes/proxy_headers/proxy_headers.conf;
        include includes/proxy_headers/keepalive.conf;
        proxy_pass http://dummy_servers_html;
    }

    # Active Healthcheck
     location @health_check {
            proxy_set_header Host www2.example.com;
            proxy_pass http://dummy_servers_html;

            health_check interval=3s fails=2 passes=2 uri=/health match=status_html_ok;
            access_log  /var/log/nginx/health_check.log main;

            internal;  # Internal request only
    }

}
